#!/usr/bin/env python3
#
# BTZen - Bluetooth Smart sensor reading library.
#
# Copyright (C) 2015-2018 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import asyncio
import logging
import uvloop
from datetime import datetime

import btzen

async def read_sensor(name, sensor):
    while True:
        value = await sensor.read()
        print_data(name, '{:.1f}'.format(value))
        await asyncio.sleep(-loop.time() % 1)

async def read_accelerometer(name, sensor):
    await sensor.set_interval(0.1)
    while True:
        values = await sensor.read()
        values = ', '.join('{:.4f}'.format(v) for v in values)
        print_data(name, values)

async def read_button(name, button):
    while True:
        value = await button.read()
        print_data(name, value)

def print_data(name, value):
    print('{} {}: {}'.format(datetime.now(), name, value))


#
# sensor definitions
#
SENSORS = [
#   ('pressure', btzen.Pressure, False, read_sensor),
#   ('temperature', btzen.Temperature, False, read_sensor),
#   ('humidity', btzen.Humidity, False, read_sensor),
#   ('light', btzen.Light, False, read_sensor),
    # notifying readers
    ('button', btzen.Button, True, read_button),
#    ('accelerometer', btzen.Accelerometer, True, read_accelerometer),
]

parser = argparse.ArgumentParser()
parser.add_argument(
    '--verbose', default=False, action='store_true',
    help='show debug log'
)
parser.add_argument('device', help='MAC address of device')
args = parser.parse_args()

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.INFO)

# get the loop first
uvloop.install()
loop = asyncio.get_event_loop()

# initialize all Sensor Tag sensors
items = [
    (name, reader, cls(args.device, notifying=notifying))
    for name, cls, notifying, reader in SENSORS
]
sensors =  [sensor for _, _, sensor in items]

# create tasks reading the sensor data
tasks = [reader(name, sensor) for name, reader, sensor in items]

# create connection manager
manager = btzen.ConnectionManager()
manager.add(*sensors)

try:
    loop.run_until_complete(asyncio.gather(manager, *tasks))
finally:
    # connection manager closes all sensors
    manager.close()

# vim: sw=4:et:ai
