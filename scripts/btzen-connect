#!/usr/bin/env python3
#
# BTZen - library to asynchronously access Bluetooth devices.
#
# Copyright (C) 2015-2021 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import asyncio
import logging
import uvloop

import btzen

parser = argparse.ArgumentParser()
parser.add_argument(
    '--verbose', default=False, action='store_true',
    help='show debug log'
)
parser.add_argument(
    '-s', '--service',
    # TODO: use btzen.Battery.service
    default='0000180f-0000-1000-8000-00805f9b34f',
    help='Bluetooth service UUID'
)
parser.add_argument(
    'device', nargs='+',
    help='List of MAC addresses of devices to connect'
)
args = parser.parse_args()

level = logging.DEBUG if args.verbose else logging.INFO
logging.basicConfig(level=level)

async def connect_devices(service: str, devices: list[str]) -> None:
    async with btzen.connect():
        items = [
            btzen.register_device(mac, btzen.Device(service))
            for mac in devices
        ]
        while True:
            await asyncio.sleep(5)

uvloop.install()

asyncio.run(connect_devices(args.service, args.device))

# vim: sw=4:et:ai
