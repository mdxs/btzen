#!/usr/bin/env python3
#
# BTZen - library to asynchronously access Bluetooth devices.
#
# Copyright (C) 2015-2021 by Artur Wroblewski <wrobell@riseup.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
BTZen demo using SensorTag Bluetooth device.

The demo supports reconnection of device.
"""

import argparse
import asyncio
import logging
import uvloop
from datetime import datetime

import btzen
import btzen.sensortag

logger = logging.getLogger()

async def read_sensors(args):
    # initialize all Sensor Tag sensors
    items = [
        (name, reader, cls(args.device, notifying=notifying))
        for name, cls, notifying, reader in SENSORS
    ]
    sensors =  [sensor for _, _, sensor in items]

    # create tasks reading the sensor data
    tasks = [reader(name, sensor) for name, reader, sensor in items]

    battery = btzen.BatteryLevel(args.device, notifying=True)
    tasks.append(battery_level(battery))

    # create connection manager
    manager = btzen.ConnectionManager(interface=args.interface)
    manager.add(battery, *sensors)
    try:
        await asyncio.gather(manager, *tasks)
    finally:
        # connection manager closes all sensors
        manager.close()

async def read_data(dev):
    while not dev.is_closed:
        try:
            value = await dev.read()
        except asyncio.CancelledError:
            logger.info('{}: cancelled'.format(dev))
        else:
            yield value

async def read_sensor(name, sensor):
    loop = asyncio.get_event_loop()
    async for value in read_data(sensor):
        print_data(name, '{:.1f}'.format(value))
        await asyncio.sleep(-loop.time() % 1)

async def read_accelerometer(name, sensor):
    sensor.set_interval(0.1)
    async for values in read_data(sensor):
        values = ', '.join('{:.4f}'.format(v) for v in values)
        print_data(name, values)

async def read_button(name, button):
    async for value in read_data(button):
        print_data('button', value)

async def battery_level(battery):
    async for value in read_data(battery):
        print_data('battery level', value)

def print_data(name, value):
    print('{} {}: {}'.format(datetime.now(), name, value))

#
# sensor definitions
#
SENSORS = [
    ('pressure', btzen.sensortag.Pressure, False, read_sensor),
    ('temperature', btzen.sensortag.Temperature, False, read_sensor),
    ('humidity', btzen.sensortag.Humidity, False, read_sensor),
    ('light', btzen.sensortag.Light, False, read_sensor),
    # notifying readers
    ('button', btzen.sensortag.Button, True, read_button),
    ('accelerometer', btzen.sensortag.Accelerometer, True, read_accelerometer),
]

parser = argparse.ArgumentParser()
parser.add_argument(
    '--verbose', default=False, action='store_true',
    help='show debug log'
)
parser.add_argument(
    '-i', '--interface', default='hci0',
    help='Host controller interface (HCI)'
)
parser.add_argument('device', help='MAC address of device')
args = parser.parse_args()

level = logging.DEBUG if args.verbose else logging.INFO
logging.basicConfig(level=level)

uvloop.install()
asyncio.run(read_sensors(args))

# vim: sw=4:et:ai
